{"version":3,"sources":["components/Dropdown.js","App.js","serviceWorker.js","index.js"],"names":["Dropdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","dropdownCheck","setState","active","state","console","log","selectOption","event","dropdownValue","target","value","dropdownDown","options","_this2","react_default","a","createElement","className","onBlur","onMouseDown","type","readOnly","map","selectValue","selectKey","key","toString","Component","App","rel","href","integrity","crossOrigin","src_components_Dropdown","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OA+DeA,2BAzDb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,cAAgB,WACdP,EAAKQ,SAAS,CACZC,QAAST,EAAKU,MAAMD,QACnB,WACDE,QAAQC,IAAIZ,EAAKU,MAAMD,WAdTT,EAkBlBa,aAAe,SAACC,GACdd,EAAKQ,SAAS,CAACO,cAAeD,EAAME,OAAOC,SAnB3BjB,EAsBlBkB,aAAe,WACblB,EAAKQ,SAAS,CACZC,QAAQ,KArBVT,EAAKU,MAAM,CACTK,cAAe,cACfN,QAAQ,EACRU,QAAS,IANKnB,wEA4BV,IAAAoB,EAAAjB,KACN,OAEEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,OAAQtB,KAAKe,aAAcQ,YAAavB,KAAKI,eAChEc,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAASV,MAAOd,KAAKO,MAAMK,cAAgBU,OAAQtB,KAAKe,aAAeU,UAAQ,IAC3FP,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBAAmBrB,KAAKO,MAAMD,OAAQ,SAAW,MAC/DY,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAEVrB,KAAKJ,MAAMoB,QAAQU,IAAI,SAACC,EAAaC,GACnC,OACEV,EAAAC,EAAAC,cAAA,MAAIS,IAAKD,GACRV,EAAAC,EAAAC,cAAA,UAAQN,MAAOa,EAAYG,WAAYD,IAAKD,EAAWL,YAAaN,EAAKP,cAAeiB,EAAxF,kBAzCII,cCaRC,mLATX,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMa,IAAI,aAAaC,KAAK,0DAA0DC,UAAU,0EAA0EC,YAAY,cACtLlB,EAAAC,EAAAC,cAACiB,EAAD,CAAUrB,QAJE,CAAC,SAAS,SAAS,SAAS,SAAS,oBAFvCe,aCOEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.33d96951.chunk.js","sourcesContent":["import React,{Component} from 'react';\n\nimport './Dropdown.css'\n\nclass Dropdown extends Component{\n\n  constructor(props){\n    super(props);\n\n    this.state={\n      dropdownValue: \"Hello There\",\n      active: false,\n      options: '',\n    }\n  }\n\n  dropdownCheck = () =>{\n    this.setState({\n      active: !this.state.active, \n    }, () =>{\n      console.log(this.state.active)\n    })\n  }\n\n  selectOption = (event) =>{\n    this.setState({dropdownValue: event.target.value});\n  }\n\n  dropdownDown = () =>{\n    this.setState({\n      active: false,\n    })\n  }\n\n  render(){\n    return(\n\n      <div className=\"box\" onBlur={this.dropdownDown} onMouseDown={this.dropdownCheck}>\n        <input type=\"button\" value={this.state.dropdownValue}  onBlur={this.dropdownDown}  readOnly/>  \n        <div className={'optionSelect ' + (this.state.active? 'active' : ' ')} >\n          <ul className=\"selectOption\">\n            {\n              this.props.options.map((selectValue, selectKey)=>{\n                return(\n                  <li key={selectKey}>\n                   <button value={selectValue.toString()} key={selectKey} onMouseDown={this.selectOption}>{selectValue} </button>\n                  </li>\n                  \n                );\n              })\n            }\n          </ul>\n          \n\n        </div>\n        \n      </div>\n\n    );\n  }\n\n}\n\nexport default Dropdown;","import React, { Component } from 'react';\nimport './App.css';\n\nimport Dropdown from './components/Dropdown'\n\nclass App extends Component {\n  render() {\n    const anArray = [\"Value1\",\"Value2\",\"Value3\",\"Value4\",\"Value5\",];\n    return (\n      <div>\n        <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.7.1/css/all.css\" integrity=\"sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr\" crossOrigin=\"anonymous\" />\n        <Dropdown options={anArray}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}